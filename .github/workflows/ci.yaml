---
name: CI

on:
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Scan workflow call:
  workflow_call:
  # Scan mainline branches and report all findings:
  push:
    branches: ["master", "main"]
  # Scan changed files in PRs (diff-aware scanning):
  pull_request:
    branches: ["master", "main"]

# Don't grant any access by default
permissions: {}

env:
  target_ref: ${{ github.head_ref || github.ref_name }}
  GO111MODULE: on
  GOPRIVATE: ''

jobs:
  ci:
    name: CI
    strategy:
      matrix:
        go-version: ['stable']  # only use ONE version of go here or the upload-artifact will fail
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    ############################################
    # Grant status permission for MULTI_STATUS #
    ############################################
    permissions:
      contents: read
      packages: read
      statuses: write

    steps:
      - name: actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: ${{ github.repository }}
          ref: ${{ env.target_ref }}
          token: ${{ github.token }}
          persist-credentials: false  # otherwise, the token used is the GITHUB_TOKEN, instead of your
          #                             personal access token.
          # fetch-depth: 0

      - name: Load super-linter configuration
        run: |
          cat ".github/super-linter.env" >> "${GITHUB_ENV}"

      - name: super-linter/super-linter
        uses: super-linter/super-linter@4e8a7c2bf106c4c766c816b35ec612638dc9b6b2  # v7.3.0
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: actions/setup-go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34  # v5.3.0
        with:
          go-version: ${{ matrix.go-version }}

      - name: go version
        run: |
          go version
          go env

      - name: go mod tidy
        run: |
          go mod tidy

      - name: go clean --cache
        run: |
          go clean --cache

      - name: golangci/golangci-lint-action
        uses: golangci/golangci-lint-action@2226d7cb06a077cd73e56eedd38eecad18e5d837  # v6.5.0
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the
          # latest version. When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash
          # of a commit.
          version: latest

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0
          args: --verbose
            --tests=true
            --timeout=1m
            --config=.github/linters/.golangci.yml
            --issues-exit-code=1

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true
          skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

      - name: go test
        run: |
          go env
          go test -v -race -coverprofile=coverage.gcov -covermode=atomic ./...
          go test -v -coverprofile=coverage.gcov -covermode=count ./...
          go tool cover -func=coverage.gcov -o=coverage.out

      - name: jandelgado/gcov2lcov-action
        uses: jandelgado/gcov2lcov-action@4e1989767862652e6ca8d3e2e61aabe6d43be28b  # v1.1.1
        with:
          infile: coverage.gcov
          outfile: coverage.lcov

      - name: VeryGoodOpenSource/very_good_coverage
        uses: VeryGoodOpenSource/very_good_coverage@c953fca3e24a915e111cc6f55f03f756dcb3964c  # v3.0.0
        with:
          path: coverage.lcov
          min_coverage: 0

      # Upload generated artifacts for historical reference
      - name: actions/upload-artifact
        id: artifact-upload-step
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1  # v4.6.1
        with:
          name: test-reports
          path: ./coverage.*
          retention-days: 180

      - name: Show Artifact ID
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
